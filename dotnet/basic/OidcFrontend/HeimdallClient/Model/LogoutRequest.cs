/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// LogoutRequest
    /// </summary>
    [DataContract(Name = "LogoutRequest")]
    public partial class LogoutRequest : IEquatable<LogoutRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogoutRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutRequest" /> class.
        /// </summary>
        /// <param name="query">The URI query string received at the OAuth 2.0/OIDC end session endpoint. This must be the raw query string (Heimdall will do the decoding). (required).</param>
        /// <param name="session">The session identifier (if any), which has been stored in a browser HTTP only cookie. This is used to identify  the users single sign-on session..</param>
        /// <param name="confirmLogout">Flag indicating if the end-user has given their consent and confirmed they want to end the session.   If you do not wish to prompt the end-user, you can set this flag always &#x60;true&#x60;. (required).</param>
        public LogoutRequest(string query = default(string), string session = default(string), bool confirmLogout = default(bool))
        {
            // to ensure "query" is required (not null)
            if (query == null) {
                throw new ArgumentNullException("query is a required property for LogoutRequest and cannot be null");
            }
            this.Query = query;
            this.ConfirmLogout = confirmLogout;
            this.Session = session;
        }

        /// <summary>
        /// The URI query string received at the OAuth 2.0/OIDC end session endpoint. This must be the raw query string (Heimdall will do the decoding).
        /// </summary>
        /// <value>The URI query string received at the OAuth 2.0/OIDC end session endpoint. This must be the raw query string (Heimdall will do the decoding).</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// The session identifier (if any), which has been stored in a browser HTTP only cookie. This is used to identify  the users single sign-on session.
        /// </summary>
        /// <value>The session identifier (if any), which has been stored in a browser HTTP only cookie. This is used to identify  the users single sign-on session.</value>
        [DataMember(Name = "session", EmitDefaultValue = true)]
        public string Session { get; set; }

        /// <summary>
        /// Flag indicating if the end-user has given their consent and confirmed they want to end the session.   If you do not wish to prompt the end-user, you can set this flag always &#x60;true&#x60;.
        /// </summary>
        /// <value>Flag indicating if the end-user has given their consent and confirmed they want to end the session.   If you do not wish to prompt the end-user, you can set this flag always &#x60;true&#x60;.</value>
        [DataMember(Name = "confirm_logout", IsRequired = true, EmitDefaultValue = true)]
        public bool ConfirmLogout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogoutRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  ConfirmLogout: ").Append(ConfirmLogout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogoutRequest);
        }

        /// <summary>
        /// Returns true if LogoutRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LogoutRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogoutRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Session == input.Session ||
                    (this.Session != null &&
                    this.Session.Equals(input.Session))
                ) && 
                (
                    this.ConfirmLogout == input.ConfirmLogout ||
                    this.ConfirmLogout.Equals(input.ConfirmLogout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Session != null)
                {
                    hashCode = (hashCode * 59) + this.Session.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfirmLogout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
