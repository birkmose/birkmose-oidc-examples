/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// SessionState
    /// </summary>
    [DataContract(Name = "SessionState")]
    public partial class SessionState : IEquatable<SessionState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionState" /> class.
        /// </summary>
        /// <param name="jsonData">Dynamic data (if any) associated with the session, represented as key/value pairs..</param>
        /// <param name="exp">Timestamp for when the session expires. (required).</param>
        public SessionState(Dictionary<string, Object> jsonData = default(Dictionary<string, Object>), DateTime exp = default(DateTime))
        {
            this.Exp = exp;
            this.JsonData = jsonData;
        }

        /// <summary>
        /// Dynamic data (if any) associated with the session, represented as key/value pairs.
        /// </summary>
        /// <value>Dynamic data (if any) associated with the session, represented as key/value pairs.</value>
        [DataMember(Name = "json_data", EmitDefaultValue = true)]
        public Dictionary<string, Object> JsonData { get; set; }

        /// <summary>
        /// Timestamp for when the session expires.
        /// </summary>
        /// <value>Timestamp for when the session expires.</value>
        [DataMember(Name = "exp", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Exp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionState {\n");
            sb.Append("  JsonData: ").Append(JsonData).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionState);
        }

        /// <summary>
        /// Returns true if SessionState instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JsonData == input.JsonData ||
                    this.JsonData != null &&
                    input.JsonData != null &&
                    this.JsonData.SequenceEqual(input.JsonData)
                ) && 
                (
                    this.Exp == input.Exp ||
                    (this.Exp != null &&
                    this.Exp.Equals(input.Exp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JsonData != null)
                {
                    hashCode = (hashCode * 59) + this.JsonData.GetHashCode();
                }
                if (this.Exp != null)
                {
                    hashCode = (hashCode * 59) + this.Exp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
