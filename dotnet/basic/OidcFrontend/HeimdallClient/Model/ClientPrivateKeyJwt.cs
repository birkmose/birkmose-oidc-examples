/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// Private key JWT
    /// </summary>
    [DataContract(Name = "ClientPrivateKeyJwt")]
    public partial class ClientPrivateKeyJwt : IEquatable<ClientPrivateKeyJwt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientPrivateKeyJwt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientPrivateKeyJwt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientPrivateKeyJwt" /> class.
        /// </summary>
        /// <param name="kid">Key ID for the key. (required).</param>
        /// <param name="pemPublicKey">Public key specified in the PEM format. (required).</param>
        public ClientPrivateKeyJwt(string kid = default(string), string pemPublicKey = default(string))
        {
            // to ensure "kid" is required (not null)
            if (kid == null) {
                throw new ArgumentNullException("kid is a required property for ClientPrivateKeyJwt and cannot be null");
            }
            this.Kid = kid;
            // to ensure "pemPublicKey" is required (not null)
            if (pemPublicKey == null) {
                throw new ArgumentNullException("pemPublicKey is a required property for ClientPrivateKeyJwt and cannot be null");
            }
            this.PemPublicKey = pemPublicKey;
        }

        /// <summary>
        /// Key ID for the key.
        /// </summary>
        /// <value>Key ID for the key.</value>
        [DataMember(Name = "kid", IsRequired = true, EmitDefaultValue = false)]
        public string Kid { get; set; }

        /// <summary>
        /// Public key specified in the PEM format.
        /// </summary>
        /// <value>Public key specified in the PEM format.</value>
        [DataMember(Name = "pem_public_key", IsRequired = true, EmitDefaultValue = false)]
        public string PemPublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientPrivateKeyJwt {\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  PemPublicKey: ").Append(PemPublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientPrivateKeyJwt);
        }

        /// <summary>
        /// Returns true if ClientPrivateKeyJwt instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientPrivateKeyJwt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientPrivateKeyJwt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.PemPublicKey == input.PemPublicKey ||
                    (this.PemPublicKey != null &&
                    this.PemPublicKey.Equals(input.PemPublicKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.PemPublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.PemPublicKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
