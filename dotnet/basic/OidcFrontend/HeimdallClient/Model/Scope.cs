/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// Scope
    /// </summary>
    [DataContract(Name = "Scope")]
    public partial class Scope : IEquatable<Scope>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Scope" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Scope() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Scope" /> class.
        /// </summary>
        /// <param name="name">Name of scope (used in tokens for instance). (required).</param>
        /// <param name="consentLabel">Label to display to end-users when asking for consent to grant the scope (human readable text)..</param>
        /// <param name="requiresConsent">Should end-users be prompted for consent if a client application requests this scope..</param>
        public Scope(string name = default(string), string consentLabel = default(string), bool requiresConsent = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Scope and cannot be null");
            }
            this.Name = name;
            this.ConsentLabel = consentLabel;
            this.RequiresConsent = requiresConsent;
        }

        /// <summary>
        /// Name of scope (used in tokens for instance).
        /// </summary>
        /// <value>Name of scope (used in tokens for instance).</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Label to display to end-users when asking for consent to grant the scope (human readable text).
        /// </summary>
        /// <value>Label to display to end-users when asking for consent to grant the scope (human readable text).</value>
        [DataMember(Name = "consent_label", EmitDefaultValue = true)]
        public string ConsentLabel { get; set; }

        /// <summary>
        /// Should end-users be prompted for consent if a client application requests this scope.
        /// </summary>
        /// <value>Should end-users be prompted for consent if a client application requests this scope.</value>
        [DataMember(Name = "requires_consent", EmitDefaultValue = true)]
        public bool RequiresConsent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Scope {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConsentLabel: ").Append(ConsentLabel).Append("\n");
            sb.Append("  RequiresConsent: ").Append(RequiresConsent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scope);
        }

        /// <summary>
        /// Returns true if Scope instances are equal
        /// </summary>
        /// <param name="input">Instance of Scope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scope input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ConsentLabel == input.ConsentLabel ||
                    (this.ConsentLabel != null &&
                    this.ConsentLabel.Equals(input.ConsentLabel))
                ) && 
                (
                    this.RequiresConsent == input.RequiresConsent ||
                    this.RequiresConsent.Equals(input.RequiresConsent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ConsentLabel != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiresConsent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
