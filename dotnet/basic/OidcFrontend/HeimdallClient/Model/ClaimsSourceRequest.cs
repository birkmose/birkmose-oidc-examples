/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// ClaimsSourceRequest
    /// </summary>
    [DataContract(Name = "ClaimsSourceRequest")]
    public partial class ClaimsSourceRequest : IEquatable<ClaimsSourceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsSourceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClaimsSourceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsSourceRequest" /> class.
        /// </summary>
        /// <param name="sub">sub (required).</param>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="scopes">scopes (required).</param>
        /// <param name="additionalClaims">additionalClaims.</param>
        /// <param name="claims">claims.</param>
        public ClaimsSourceRequest(string sub = default(string), string clientId = default(string), List<string> scopes = default(List<string>), AdditionalClaims additionalClaims = default(AdditionalClaims), RequestedClaims claims = default(RequestedClaims))
        {
            // to ensure "sub" is required (not null)
            if (sub == null) {
                throw new ArgumentNullException("sub is a required property for ClaimsSourceRequest and cannot be null");
            }
            this.Sub = sub;
            // to ensure "clientId" is required (not null)
            if (clientId == null) {
                throw new ArgumentNullException("clientId is a required property for ClaimsSourceRequest and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "scopes" is required (not null)
            if (scopes == null) {
                throw new ArgumentNullException("scopes is a required property for ClaimsSourceRequest and cannot be null");
            }
            this.Scopes = scopes;
            this.AdditionalClaims = additionalClaims;
            this.Claims = claims;
        }

        /// <summary>
        /// Gets or Sets Sub
        /// </summary>
        [DataMember(Name = "sub", IsRequired = true, EmitDefaultValue = false)]
        public string Sub { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalClaims
        /// </summary>
        [DataMember(Name = "additional_claims", EmitDefaultValue = false)]
        public AdditionalClaims AdditionalClaims { get; set; }

        /// <summary>
        /// Gets or Sets Claims
        /// </summary>
        [DataMember(Name = "claims", EmitDefaultValue = false)]
        public RequestedClaims Claims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClaimsSourceRequest {\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  AdditionalClaims: ").Append(AdditionalClaims).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClaimsSourceRequest);
        }

        /// <summary>
        /// Returns true if ClaimsSourceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClaimsSourceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClaimsSourceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sub == input.Sub ||
                    (this.Sub != null &&
                    this.Sub.Equals(input.Sub))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.AdditionalClaims == input.AdditionalClaims ||
                    (this.AdditionalClaims != null &&
                    this.AdditionalClaims.Equals(input.AdditionalClaims))
                ) && 
                (
                    this.Claims == input.Claims ||
                    (this.Claims != null &&
                    this.Claims.Equals(input.Claims))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sub != null)
                {
                    hashCode = (hashCode * 59) + this.Sub.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.AdditionalClaims != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalClaims.GetHashCode();
                }
                if (this.Claims != null)
                {
                    hashCode = (hashCode * 59) + this.Claims.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
