/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HeimdallClient.Client;
using HeimdallClient.Model;

namespace HeimdallClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to delete a claim.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <returns></returns>
        void ClaimDelete(string claim);

        /// <summary>
        /// Delete claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to delete a claim.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClaimDeleteWithHttpInfo(string claim);
        /// <summary>
        /// Get all claims
        /// </summary>
        /// <remarks>
        /// CRUD operation to read all claims that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IndividualClaim&gt;</returns>
        List<IndividualClaim> IndividualClaims();

        /// <summary>
        /// Get all claims
        /// </summary>
        /// <remarks>
        /// CRUD operation to read all claims that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IndividualClaim&gt;</returns>
        ApiResponse<List<IndividualClaim>> IndividualClaimsWithHttpInfo();
        /// <summary>
        /// Save individual claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to save a new claim that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <returns></returns>
        void SaveIndividualClaim(IndividualClaim individualClaim);

        /// <summary>
        /// Save individual claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to save a new claim that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveIndividualClaimWithHttpInfo(IndividualClaim individualClaim);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to delete a claim.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClaimDeleteAsync(string claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to delete a claim.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClaimDeleteWithHttpInfoAsync(string claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all claims
        /// </summary>
        /// <remarks>
        /// CRUD operation to read all claims that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IndividualClaim&gt;</returns>
        System.Threading.Tasks.Task<List<IndividualClaim>> IndividualClaimsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all claims
        /// </summary>
        /// <remarks>
        /// CRUD operation to read all claims that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IndividualClaim&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IndividualClaim>>> IndividualClaimsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save individual claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to save a new claim that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveIndividualClaimAsync(IndividualClaim individualClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save individual claim
        /// </summary>
        /// <remarks>
        /// CRUD operation to save a new claim that can be requested by client applications.
        /// </remarks>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveIndividualClaimWithHttpInfoAsync(IndividualClaim individualClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimsApi : IClaimsApiSync, IClaimsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClaimsApi : IClaimsApi
    {
        private HeimdallClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClaimsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClaimsApi(string basePath)
        {
            this.Configuration = HeimdallClient.Client.Configuration.MergeConfigurations(
                HeimdallClient.Client.GlobalConfiguration.Instance,
                new HeimdallClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HeimdallClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HeimdallClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HeimdallClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClaimsApi(HeimdallClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HeimdallClient.Client.Configuration.MergeConfigurations(
                HeimdallClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HeimdallClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HeimdallClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HeimdallClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClaimsApi(HeimdallClient.Client.ISynchronousClient client, HeimdallClient.Client.IAsynchronousClient asyncClient, HeimdallClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HeimdallClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HeimdallClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HeimdallClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HeimdallClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HeimdallClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete claim CRUD operation to delete a claim.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <returns></returns>
        public void ClaimDelete(string claim)
        {
            ClaimDeleteWithHttpInfo(claim);
        }

        /// <summary>
        /// Delete claim CRUD operation to delete a claim.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HeimdallClient.Client.ApiResponse<Object> ClaimDeleteWithHttpInfo(string claim)
        {
            // verify the required parameter 'claim' is set
            if (claim == null)
            {
                throw new HeimdallClient.Client.ApiException(400, "Missing required parameter 'claim' when calling ClaimsApi->ClaimDelete");
            }

            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claim", HeimdallClient.Client.ClientUtils.ParameterToString(claim)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/claims/{claim}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete claim CRUD operation to delete a claim.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClaimDeleteAsync(string claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClaimDeleteWithHttpInfoAsync(claim, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete claim CRUD operation to delete a claim.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claim">Name of claim to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HeimdallClient.Client.ApiResponse<Object>> ClaimDeleteWithHttpInfoAsync(string claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'claim' is set
            if (claim == null)
            {
                throw new HeimdallClient.Client.ApiException(400, "Missing required parameter 'claim' when calling ClaimsApi->ClaimDelete");
            }


            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claim", HeimdallClient.Client.ClientUtils.ParameterToString(claim)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/claims/{claim}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all claims CRUD operation to read all claims that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;IndividualClaim&gt;</returns>
        public List<IndividualClaim> IndividualClaims()
        {
            HeimdallClient.Client.ApiResponse<List<IndividualClaim>> localVarResponse = IndividualClaimsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all claims CRUD operation to read all claims that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;IndividualClaim&gt;</returns>
        public HeimdallClient.Client.ApiResponse<List<IndividualClaim>> IndividualClaimsWithHttpInfo()
        {
            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<IndividualClaim>>("/claims", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndividualClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all claims CRUD operation to read all claims that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;IndividualClaim&gt;</returns>
        public async System.Threading.Tasks.Task<List<IndividualClaim>> IndividualClaimsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HeimdallClient.Client.ApiResponse<List<IndividualClaim>> localVarResponse = await IndividualClaimsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all claims CRUD operation to read all claims that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;IndividualClaim&gt;)</returns>
        public async System.Threading.Tasks.Task<HeimdallClient.Client.ApiResponse<List<IndividualClaim>>> IndividualClaimsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IndividualClaim>>("/claims", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndividualClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save individual claim CRUD operation to save a new claim that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <returns></returns>
        public void SaveIndividualClaim(IndividualClaim individualClaim)
        {
            SaveIndividualClaimWithHttpInfo(individualClaim);
        }

        /// <summary>
        /// Save individual claim CRUD operation to save a new claim that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HeimdallClient.Client.ApiResponse<Object> SaveIndividualClaimWithHttpInfo(IndividualClaim individualClaim)
        {
            // verify the required parameter 'individualClaim' is set
            if (individualClaim == null)
            {
                throw new HeimdallClient.Client.ApiException(400, "Missing required parameter 'individualClaim' when calling ClaimsApi->SaveIndividualClaim");
            }

            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = individualClaim;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/claim", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveIndividualClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save individual claim CRUD operation to save a new claim that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveIndividualClaimAsync(IndividualClaim individualClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SaveIndividualClaimWithHttpInfoAsync(individualClaim, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Save individual claim CRUD operation to save a new claim that can be requested by client applications.
        /// </summary>
        /// <exception cref="HeimdallClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="individualClaim"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HeimdallClient.Client.ApiResponse<Object>> SaveIndividualClaimWithHttpInfoAsync(IndividualClaim individualClaim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'individualClaim' is set
            if (individualClaim == null)
            {
                throw new HeimdallClient.Client.ApiException(400, "Missing required parameter 'individualClaim' when calling ClaimsApi->SaveIndividualClaim");
            }


            HeimdallClient.Client.RequestOptions localVarRequestOptions = new HeimdallClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = HeimdallClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HeimdallClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = individualClaim;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/claim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveIndividualClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
