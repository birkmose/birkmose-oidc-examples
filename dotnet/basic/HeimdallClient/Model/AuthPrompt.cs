/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// Indicating an authenthication prompt is required for the end user. The response includes the &#x60;client_id&#x60; of the   requesting OAuth 2.0/OIDC client, the &#x60;auth_sid&#x60; which is the newly created authorization session identifier, and the
    /// </summary>
    [DataContract(Name = "AuthPrompt")]
    public partial class AuthPrompt : IEquatable<AuthPrompt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthPrompt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthPrompt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthPrompt" /> class.
        /// </summary>
        /// <param name="authSid">Authorization session identifier of the created authorization session. (required).</param>
        /// <param name="clientId">Client id of the OAuth 2.0/OIDC client that initiated the authorization request. (required).</param>
        /// <param name="request">Request parameters of the authorization request decoded as JSON. If the authorization request  is a Pushed Access Request (PAR), the request field will contain the value of the original pushed access request   as it has been stored in the backend (this allows you to use the &#x60;request&#x60; field for both PAR and non-PAR requests). (required).</param>
        public AuthPrompt(string authSid = default(string), string clientId = default(string), Dictionary<string, string> request = default(Dictionary<string, string>))
        {
            // to ensure "authSid" is required (not null)
            if (authSid == null) {
                throw new ArgumentNullException("authSid is a required property for AuthPrompt and cannot be null");
            }
            this.AuthSid = authSid;
            // to ensure "clientId" is required (not null)
            if (clientId == null) {
                throw new ArgumentNullException("clientId is a required property for AuthPrompt and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "request" is required (not null)
            if (request == null) {
                throw new ArgumentNullException("request is a required property for AuthPrompt and cannot be null");
            }
            this.Request = request;
        }

        /// <summary>
        /// Authorization session identifier of the created authorization session.
        /// </summary>
        /// <value>Authorization session identifier of the created authorization session.</value>
        [DataMember(Name = "auth_sid", IsRequired = true, EmitDefaultValue = false)]
        public string AuthSid { get; set; }

        /// <summary>
        /// Client id of the OAuth 2.0/OIDC client that initiated the authorization request.
        /// </summary>
        /// <value>Client id of the OAuth 2.0/OIDC client that initiated the authorization request.</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Request parameters of the authorization request decoded as JSON. If the authorization request  is a Pushed Access Request (PAR), the request field will contain the value of the original pushed access request   as it has been stored in the backend (this allows you to use the &#x60;request&#x60; field for both PAR and non-PAR requests).
        /// </summary>
        /// <value>Request parameters of the authorization request decoded as JSON. If the authorization request  is a Pushed Access Request (PAR), the request field will contain the value of the original pushed access request   as it has been stored in the backend (this allows you to use the &#x60;request&#x60; field for both PAR and non-PAR requests).</value>
        [DataMember(Name = "request", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthPrompt {\n");
            sb.Append("  AuthSid: ").Append(AuthSid).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthPrompt);
        }

        /// <summary>
        /// Returns true if AuthPrompt instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthPrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthPrompt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthSid == input.AuthSid ||
                    (this.AuthSid != null &&
                    this.AuthSid.Equals(input.AuthSid))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Request == input.Request ||
                    this.Request != null &&
                    input.Request != null &&
                    this.Request.SequenceEqual(input.Request)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthSid != null)
                {
                    hashCode = (hashCode * 59) + this.AuthSid.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
