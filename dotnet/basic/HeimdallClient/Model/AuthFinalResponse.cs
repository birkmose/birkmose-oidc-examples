/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// Indicates a final response that redirects to the client application. The frontend is required to redirect the user-agent (the browser)  to the client application with the specified authenthication response. A final response type implicitely terminates the authorization session.
    /// </summary>
    [DataContract(Name = "AuthFinalResponse")]
    public partial class AuthFinalResponse : IEquatable<AuthFinalResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = false)]
        public ResponseMode Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthFinalResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthFinalResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthFinalResponse" /> class.
        /// </summary>
        /// <param name="uri">The URI to which the user agent should be redirected. (required).</param>
        /// <param name="session">Indicates the single sign-on session identifier, that should be stored in the user-agents cookie store as a HTTP-only cookie.  This value can be null if the authorization was not successfull for instance..</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="parameters">Response parameters that should be included in the redirect (how these are encoded/serialized depends on the value of the &#x60;mode&#x60; field). (required).</param>
        public AuthFinalResponse(string uri = default(string), string session = default(string), ResponseMode mode = default(ResponseMode), Dictionary<string, string> parameters = default(Dictionary<string, string>))
        {
            // to ensure "uri" is required (not null)
            if (uri == null) {
                throw new ArgumentNullException("uri is a required property for AuthFinalResponse and cannot be null");
            }
            this.Uri = uri;
            this.Mode = mode;
            // to ensure "parameters" is required (not null)
            if (parameters == null) {
                throw new ArgumentNullException("parameters is a required property for AuthFinalResponse and cannot be null");
            }
            this.Parameters = parameters;
            this.Session = session;
        }

        /// <summary>
        /// The URI to which the user agent should be redirected.
        /// </summary>
        /// <value>The URI to which the user agent should be redirected.</value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Indicates the single sign-on session identifier, that should be stored in the user-agents cookie store as a HTTP-only cookie.  This value can be null if the authorization was not successfull for instance.
        /// </summary>
        /// <value>Indicates the single sign-on session identifier, that should be stored in the user-agents cookie store as a HTTP-only cookie.  This value can be null if the authorization was not successfull for instance.</value>
        [DataMember(Name = "session", EmitDefaultValue = true)]
        public string Session { get; set; }

        /// <summary>
        /// Response parameters that should be included in the redirect (how these are encoded/serialized depends on the value of the &#x60;mode&#x60; field).
        /// </summary>
        /// <value>Response parameters that should be included in the redirect (how these are encoded/serialized depends on the value of the &#x60;mode&#x60; field).</value>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthFinalResponse {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthFinalResponse);
        }

        /// <summary>
        /// Returns true if AuthFinalResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthFinalResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthFinalResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Session == input.Session ||
                    (this.Session != null &&
                    this.Session.Equals(input.Session))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                if (this.Session != null)
                {
                    hashCode = (hashCode * 59) + this.Session.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
