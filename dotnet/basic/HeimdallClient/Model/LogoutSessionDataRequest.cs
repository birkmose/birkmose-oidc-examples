/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HeimdallClient.Client.OpenAPIDateConverter;

namespace HeimdallClient.Model
{
    /// <summary>
    /// LogoutSessionDataRequest
    /// </summary>
    [DataContract(Name = "LogoutSessionDataRequest")]
    public partial class LogoutSessionDataRequest : IEquatable<LogoutSessionDataRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutSessionDataRequest" /> class.
        /// </summary>
        /// <param name="logoutSid">Logout session identifier of the ongoing logout session..</param>
        /// <param name="data">Arbitrary data (key/value pairs of data) to append to the ongoing logout session..</param>
        public LogoutSessionDataRequest(string logoutSid = default(string), Dictionary<string, Object> data = default(Dictionary<string, Object>))
        {
            this.LogoutSid = logoutSid;
            this.Data = data;
        }

        /// <summary>
        /// Logout session identifier of the ongoing logout session.
        /// </summary>
        /// <value>Logout session identifier of the ongoing logout session.</value>
        [DataMember(Name = "logout_sid", EmitDefaultValue = true)]
        public string LogoutSid { get; set; }

        /// <summary>
        /// Arbitrary data (key/value pairs of data) to append to the ongoing logout session.
        /// </summary>
        /// <value>Arbitrary data (key/value pairs of data) to append to the ongoing logout session.</value>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogoutSessionDataRequest {\n");
            sb.Append("  LogoutSid: ").Append(LogoutSid).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogoutSessionDataRequest);
        }

        /// <summary>
        /// Returns true if LogoutSessionDataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LogoutSessionDataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogoutSessionDataRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogoutSid == input.LogoutSid ||
                    (this.LogoutSid != null &&
                    this.LogoutSid.Equals(input.LogoutSid))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogoutSid != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutSid.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
