/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = heimdall_client.Client.OpenAPIDateConverter;

namespace heimdall_client.Model
{
    /// <summary>
    /// AuthorizePeekRequest
    /// </summary>
    [DataContract(Name = "AuthorizePeekRequest")]
    public partial class AuthorizePeekRequest : IEquatable<AuthorizePeekRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizePeekRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizePeekRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizePeekRequest" /> class.
        /// </summary>
        /// <param name="query">The URI query string received at the OAuth 2.0/OIDC authorization endpoint. This must be the raw query string (Heimdall will do the decoding). (required).</param>
        public AuthorizePeekRequest(string query = default(string))
        {
            // to ensure "query" is required (not null)
            if (query == null) {
                throw new ArgumentNullException("query is a required property for AuthorizePeekRequest and cannot be null");
            }
            this.Query = query;
        }

        /// <summary>
        /// The URI query string received at the OAuth 2.0/OIDC authorization endpoint. This must be the raw query string (Heimdall will do the decoding).
        /// </summary>
        /// <value>The URI query string received at the OAuth 2.0/OIDC authorization endpoint. This must be the raw query string (Heimdall will do the decoding).</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizePeekRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizePeekRequest);
        }

        /// <summary>
        /// Returns true if AuthorizePeekRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizePeekRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizePeekRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
