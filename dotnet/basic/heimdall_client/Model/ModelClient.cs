/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = heimdall_client.Client.OpenAPIDateConverter;

namespace heimdall_client.Model
{
    /// <summary>
    /// ModelClient
    /// </summary>
    [DataContract(Name = "_Client")]
    public partial class ModelClient : IEquatable<ModelClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        /// <param name="clientId">OIDC client id (required).</param>
        /// <param name="returnUris">List of redirection URIs that are allowed to utilized at the authorization endpoint. (required).</param>
        /// <param name="postLogoutRedirectUris">List of redirection URIs that end-user&#39;s User Agent can be redirected to after a logout has been performed  at the end session endpoint. (required).</param>
        /// <param name="clientSecrets">List of client secrets for a confidential clients. (required).</param>
        /// <param name="clientCertificate">List of client certificate for a confidential clients. Certificates are specified in the PEM format..</param>
        /// <param name="backChannelLogoutUri">Back-channel logout URI to be used when performing back-channel logouts according to the  _\&quot;OpenID Connect Back-Channel Logout 1.0\&quot;_ specification..</param>
        /// <param name="requiresJwtAssertion">Flag indicating if this client requires the use of JWT assertions.</param>
        /// <param name="clientPrivateKeysJwt">List of public keys, to be used for JWT assertions for confidential clients..</param>
        public ModelClient(string clientId = default(string), List<string> returnUris = default(List<string>), List<string> postLogoutRedirectUris = default(List<string>), List<string> clientSecrets = default(List<string>), string clientCertificate = default(string), string backChannelLogoutUri = default(string), bool requiresJwtAssertion = default(bool), List<ClientPrivateKeyJwt> clientPrivateKeysJwt = default(List<ClientPrivateKeyJwt>))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null) {
                throw new ArgumentNullException("clientId is a required property for ModelClient and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "returnUris" is required (not null)
            if (returnUris == null) {
                throw new ArgumentNullException("returnUris is a required property for ModelClient and cannot be null");
            }
            this.ReturnUris = returnUris;
            // to ensure "postLogoutRedirectUris" is required (not null)
            if (postLogoutRedirectUris == null) {
                throw new ArgumentNullException("postLogoutRedirectUris is a required property for ModelClient and cannot be null");
            }
            this.PostLogoutRedirectUris = postLogoutRedirectUris;
            // to ensure "clientSecrets" is required (not null)
            if (clientSecrets == null) {
                throw new ArgumentNullException("clientSecrets is a required property for ModelClient and cannot be null");
            }
            this.ClientSecrets = clientSecrets;
            this.ClientCertificate = clientCertificate;
            this.BackChannelLogoutUri = backChannelLogoutUri;
            this.RequiresJwtAssertion = requiresJwtAssertion;
            this.ClientPrivateKeysJwt = clientPrivateKeysJwt;
        }

        /// <summary>
        /// OIDC client id
        /// </summary>
        /// <value>OIDC client id</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// List of redirection URIs that are allowed to utilized at the authorization endpoint.
        /// </summary>
        /// <value>List of redirection URIs that are allowed to utilized at the authorization endpoint.</value>
        [DataMember(Name = "return_uris", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ReturnUris { get; set; }

        /// <summary>
        /// List of redirection URIs that end-user&#39;s User Agent can be redirected to after a logout has been performed  at the end session endpoint.
        /// </summary>
        /// <value>List of redirection URIs that end-user&#39;s User Agent can be redirected to after a logout has been performed  at the end session endpoint.</value>
        [DataMember(Name = "post_logout_redirect_uris", IsRequired = true, EmitDefaultValue = false)]
        public List<string> PostLogoutRedirectUris { get; set; }

        /// <summary>
        /// List of client secrets for a confidential clients.
        /// </summary>
        /// <value>List of client secrets for a confidential clients.</value>
        [DataMember(Name = "client_secrets", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ClientSecrets { get; set; }

        /// <summary>
        /// List of client certificate for a confidential clients. Certificates are specified in the PEM format.
        /// </summary>
        /// <value>List of client certificate for a confidential clients. Certificates are specified in the PEM format.</value>
        [DataMember(Name = "client_certificate", EmitDefaultValue = true)]
        public string ClientCertificate { get; set; }

        /// <summary>
        /// Back-channel logout URI to be used when performing back-channel logouts according to the  _\&quot;OpenID Connect Back-Channel Logout 1.0\&quot;_ specification.
        /// </summary>
        /// <value>Back-channel logout URI to be used when performing back-channel logouts according to the  _\&quot;OpenID Connect Back-Channel Logout 1.0\&quot;_ specification.</value>
        [DataMember(Name = "back_channel_logout_uri", EmitDefaultValue = true)]
        public string BackChannelLogoutUri { get; set; }

        /// <summary>
        /// Flag indicating if this client requires the use of JWT assertions
        /// </summary>
        /// <value>Flag indicating if this client requires the use of JWT assertions</value>
        [DataMember(Name = "requires_jwt_assertion", EmitDefaultValue = true)]
        public bool RequiresJwtAssertion { get; set; }

        /// <summary>
        /// List of public keys, to be used for JWT assertions for confidential clients.
        /// </summary>
        /// <value>List of public keys, to be used for JWT assertions for confidential clients.</value>
        [DataMember(Name = "client_private_keys_jwt", EmitDefaultValue = true)]
        public List<ClientPrivateKeyJwt> ClientPrivateKeysJwt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelClient {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ReturnUris: ").Append(ReturnUris).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  ClientSecrets: ").Append(ClientSecrets).Append("\n");
            sb.Append("  ClientCertificate: ").Append(ClientCertificate).Append("\n");
            sb.Append("  BackChannelLogoutUri: ").Append(BackChannelLogoutUri).Append("\n");
            sb.Append("  RequiresJwtAssertion: ").Append(RequiresJwtAssertion).Append("\n");
            sb.Append("  ClientPrivateKeysJwt: ").Append(ClientPrivateKeysJwt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelClient);
        }

        /// <summary>
        /// Returns true if ModelClient instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ReturnUris == input.ReturnUris ||
                    this.ReturnUris != null &&
                    input.ReturnUris != null &&
                    this.ReturnUris.SequenceEqual(input.ReturnUris)
                ) && 
                (
                    this.PostLogoutRedirectUris == input.PostLogoutRedirectUris ||
                    this.PostLogoutRedirectUris != null &&
                    input.PostLogoutRedirectUris != null &&
                    this.PostLogoutRedirectUris.SequenceEqual(input.PostLogoutRedirectUris)
                ) && 
                (
                    this.ClientSecrets == input.ClientSecrets ||
                    this.ClientSecrets != null &&
                    input.ClientSecrets != null &&
                    this.ClientSecrets.SequenceEqual(input.ClientSecrets)
                ) && 
                (
                    this.ClientCertificate == input.ClientCertificate ||
                    (this.ClientCertificate != null &&
                    this.ClientCertificate.Equals(input.ClientCertificate))
                ) && 
                (
                    this.BackChannelLogoutUri == input.BackChannelLogoutUri ||
                    (this.BackChannelLogoutUri != null &&
                    this.BackChannelLogoutUri.Equals(input.BackChannelLogoutUri))
                ) && 
                (
                    this.RequiresJwtAssertion == input.RequiresJwtAssertion ||
                    this.RequiresJwtAssertion.Equals(input.RequiresJwtAssertion)
                ) && 
                (
                    this.ClientPrivateKeysJwt == input.ClientPrivateKeysJwt ||
                    this.ClientPrivateKeysJwt != null &&
                    input.ClientPrivateKeysJwt != null &&
                    this.ClientPrivateKeysJwt.SequenceEqual(input.ClientPrivateKeysJwt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ReturnUris != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnUris.GetHashCode();
                }
                if (this.PostLogoutRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutRedirectUris.GetHashCode();
                }
                if (this.ClientSecrets != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecrets.GetHashCode();
                }
                if (this.ClientCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCertificate.GetHashCode();
                }
                if (this.BackChannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.BackChannelLogoutUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiresJwtAssertion.GetHashCode();
                if (this.ClientPrivateKeysJwt != null)
                {
                    hashCode = (hashCode * 59) + this.ClientPrivateKeysJwt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
