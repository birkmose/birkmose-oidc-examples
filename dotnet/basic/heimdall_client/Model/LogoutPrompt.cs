/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = heimdall_client.Client.OpenAPIDateConverter;

namespace heimdall_client.Model
{
    /// <summary>
    /// Indicates that the logout request is valid, and the user needs to be prompted to confirm that they  consent to end the session. The subject identifier along with any stored session data is included  in this response. This makes it convenient to implement custom logout logic in your frontend.
    /// </summary>
    [DataContract(Name = "LogoutPrompt")]
    public partial class LogoutPrompt : IEquatable<LogoutPrompt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutPrompt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogoutPrompt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutPrompt" /> class.
        /// </summary>
        /// <param name="sub">The identifier for the end-user (sub) (required).</param>
        /// <param name="sessionData">Dynamic data (if any) associated with the session, represented as key/value pairs. (required).</param>
        public LogoutPrompt(string sub = default(string), Dictionary<string, Object> sessionData = default(Dictionary<string, Object>))
        {
            // to ensure "sub" is required (not null)
            if (sub == null) {
                throw new ArgumentNullException("sub is a required property for LogoutPrompt and cannot be null");
            }
            this.Sub = sub;
            // to ensure "sessionData" is required (not null)
            if (sessionData == null) {
                throw new ArgumentNullException("sessionData is a required property for LogoutPrompt and cannot be null");
            }
            this.SessionData = sessionData;
        }

        /// <summary>
        /// The identifier for the end-user (sub)
        /// </summary>
        /// <value>The identifier for the end-user (sub)</value>
        [DataMember(Name = "sub", IsRequired = true, EmitDefaultValue = false)]
        public string Sub { get; set; }

        /// <summary>
        /// Dynamic data (if any) associated with the session, represented as key/value pairs.
        /// </summary>
        /// <value>Dynamic data (if any) associated with the session, represented as key/value pairs.</value>
        [DataMember(Name = "session_data", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, Object> SessionData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogoutPrompt {\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  SessionData: ").Append(SessionData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogoutPrompt);
        }

        /// <summary>
        /// Returns true if LogoutPrompt instances are equal
        /// </summary>
        /// <param name="input">Instance of LogoutPrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogoutPrompt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sub == input.Sub ||
                    (this.Sub != null &&
                    this.Sub.Equals(input.Sub))
                ) && 
                (
                    this.SessionData == input.SessionData ||
                    this.SessionData != null &&
                    input.SessionData != null &&
                    this.SessionData.SequenceEqual(input.SessionData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sub != null)
                {
                    hashCode = (hashCode * 59) + this.Sub.GetHashCode();
                }
                if (this.SessionData != null)
                {
                    hashCode = (hashCode * 59) + this.SessionData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
