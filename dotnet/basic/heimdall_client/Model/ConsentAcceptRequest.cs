/*
 * Heimdall
 *
 * # Introduction    The Heimdall backchannel API is a [RESTful](https://wikipedia.org/wiki/Representational_state_transfer) API that allows you to do authorizations, manage sessions, do CRUD on various objects, etc.          
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = heimdall_client.Client.OpenAPIDateConverter;

namespace heimdall_client.Model
{
    /// <summary>
    /// ConsentAcceptRequest
    /// </summary>
    [DataContract(Name = "ConsentAcceptRequest")]
    public partial class ConsentAcceptRequest : IEquatable<ConsentAcceptRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentAcceptRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentAcceptRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentAcceptRequest" /> class.
        /// </summary>
        /// <param name="authSid">Authorization session identifier of the ongoing authorization session. (required).</param>
        /// <param name="claims">List of claims that the end-user accepted (required).</param>
        /// <param name="scopes">List of scopes that the end-user accepted (required).</param>
        /// <param name="additionalClaims">additionalClaims.</param>
        /// <param name="callbackClaimsSource">Indicate if claims should be refreshed when the user exchanges a refresh token for a fresh token.  If set to &#x60;true&#x60;, the configured &#x60;callback_claims_source&#x60; endpoint will be invoked when a refresh token   is exchanged, giving you an opportunity to refresh the claims that are included in the generated token(s)..</param>
        public ConsentAcceptRequest(string authSid = default(string), List<string> claims = default(List<string>), List<string> scopes = default(List<string>), AdditionalClaims additionalClaims = default(AdditionalClaims), bool? callbackClaimsSource = default(bool?))
        {
            // to ensure "authSid" is required (not null)
            if (authSid == null) {
                throw new ArgumentNullException("authSid is a required property for ConsentAcceptRequest and cannot be null");
            }
            this.AuthSid = authSid;
            // to ensure "claims" is required (not null)
            if (claims == null) {
                throw new ArgumentNullException("claims is a required property for ConsentAcceptRequest and cannot be null");
            }
            this.Claims = claims;
            // to ensure "scopes" is required (not null)
            if (scopes == null) {
                throw new ArgumentNullException("scopes is a required property for ConsentAcceptRequest and cannot be null");
            }
            this.Scopes = scopes;
            this.AdditionalClaims = additionalClaims;
            this.CallbackClaimsSource = callbackClaimsSource;
        }

        /// <summary>
        /// Authorization session identifier of the ongoing authorization session.
        /// </summary>
        /// <value>Authorization session identifier of the ongoing authorization session.</value>
        [DataMember(Name = "auth_sid", IsRequired = true, EmitDefaultValue = false)]
        public string AuthSid { get; set; }

        /// <summary>
        /// List of claims that the end-user accepted
        /// </summary>
        /// <value>List of claims that the end-user accepted</value>
        [DataMember(Name = "claims", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Claims { get; set; }

        /// <summary>
        /// List of scopes that the end-user accepted
        /// </summary>
        /// <value>List of scopes that the end-user accepted</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalClaims
        /// </summary>
        [DataMember(Name = "additional_claims", EmitDefaultValue = false)]
        public AdditionalClaims AdditionalClaims { get; set; }

        /// <summary>
        /// Indicate if claims should be refreshed when the user exchanges a refresh token for a fresh token.  If set to &#x60;true&#x60;, the configured &#x60;callback_claims_source&#x60; endpoint will be invoked when a refresh token   is exchanged, giving you an opportunity to refresh the claims that are included in the generated token(s).
        /// </summary>
        /// <value>Indicate if claims should be refreshed when the user exchanges a refresh token for a fresh token.  If set to &#x60;true&#x60;, the configured &#x60;callback_claims_source&#x60; endpoint will be invoked when a refresh token   is exchanged, giving you an opportunity to refresh the claims that are included in the generated token(s).</value>
        [DataMember(Name = "callback_claims_source", EmitDefaultValue = true)]
        public bool? CallbackClaimsSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsentAcceptRequest {\n");
            sb.Append("  AuthSid: ").Append(AuthSid).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  AdditionalClaims: ").Append(AdditionalClaims).Append("\n");
            sb.Append("  CallbackClaimsSource: ").Append(CallbackClaimsSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentAcceptRequest);
        }

        /// <summary>
        /// Returns true if ConsentAcceptRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentAcceptRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentAcceptRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthSid == input.AuthSid ||
                    (this.AuthSid != null &&
                    this.AuthSid.Equals(input.AuthSid))
                ) && 
                (
                    this.Claims == input.Claims ||
                    this.Claims != null &&
                    input.Claims != null &&
                    this.Claims.SequenceEqual(input.Claims)
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.AdditionalClaims == input.AdditionalClaims ||
                    (this.AdditionalClaims != null &&
                    this.AdditionalClaims.Equals(input.AdditionalClaims))
                ) && 
                (
                    this.CallbackClaimsSource == input.CallbackClaimsSource ||
                    (this.CallbackClaimsSource != null &&
                    this.CallbackClaimsSource.Equals(input.CallbackClaimsSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthSid != null)
                {
                    hashCode = (hashCode * 59) + this.AuthSid.GetHashCode();
                }
                if (this.Claims != null)
                {
                    hashCode = (hashCode * 59) + this.Claims.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.AdditionalClaims != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalClaims.GetHashCode();
                }
                if (this.CallbackClaimsSource != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackClaimsSource.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
